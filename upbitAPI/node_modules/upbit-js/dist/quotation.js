"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("superagent");
const url = require("url");
const constant_1 = require("./constant");
function marketAll() {
    return __awaiter(this, void 0, void 0, function* () {
        const uri = url.format({
            protocol: 'https',
            hostname: constant_1.constant.UPBIT_URL_V1,
            pathname: constant_1.constant.UPBIT_URL_MARKET_ALL
        });
        const res = yield request.get(uri);
        return res.body;
    });
}
exports.marketAll = marketAll;
// candles
function candlesMinutes(param) {
    return __awaiter(this, void 0, void 0, function* () {
        const { unit, market, count, to } = param;
        const uri = url.format({
            protocol: 'https',
            hostname: constant_1.constant.UPBIT_URL_V1,
            pathname: `${constant_1.constant.UPBIT_URL_CANDLES_MINUTE}/${unit}`
        });
        const res = yield request.get(uri)
            .query({ market })
            .query({ count })
            .query({ to });
        return res.body;
    });
}
exports.candlesMinutes = candlesMinutes;
function candlesDays(param) {
    return __awaiter(this, void 0, void 0, function* () {
        const { market, count, to } = param;
        const uri = url.format({
            protocol: 'https',
            hostname: constant_1.constant.UPBIT_URL_V1,
            pathname: `${constant_1.constant.UPBIT_URL_CANDLES_DAYS}`
        });
        const res = yield request.get(uri)
            .query({ market })
            .query({ count })
            .query({ to });
        return res.body;
    });
}
exports.candlesDays = candlesDays;
function candlesWeeks(param) {
    return __awaiter(this, void 0, void 0, function* () {
        const { market, count, to } = param;
        const uri = url.format({
            protocol: 'https',
            hostname: constant_1.constant.UPBIT_URL_V1,
            pathname: `${constant_1.constant.UPBIT_URL_CANDLES_WEEKS}`
        });
        const res = yield request.get(uri)
            .query({ market })
            .query({ count })
            .query({ to });
        return res.body;
    });
}
exports.candlesWeeks = candlesWeeks;
function candlesMonths(param) {
    return __awaiter(this, void 0, void 0, function* () {
        const { market, count, to } = param;
        const uri = url.format({
            protocol: 'https',
            hostname: constant_1.constant.UPBIT_URL_V1,
            pathname: `${constant_1.constant.UPBIT_URL_CANDLES_MONTHS}`
        });
        const res = yield request.get(uri)
            .query({ market })
            .query({ count })
            .query({ to });
        return res.body;
    });
}
exports.candlesMonths = candlesMonths;
// trade ticks
function tradesTicks(param) {
    return __awaiter(this, void 0, void 0, function* () {
        const { market, to, count, cursor } = param;
        const uri = url.format({
            protocol: 'https',
            hostname: constant_1.constant.UPBIT_URL_V1,
            pathname: constant_1.constant.UPBIT_URL_TRADES_TICKS
        });
        const res = yield request.get(uri)
            .query({ market })
            .query({ to })
            .query({ count })
            .query({ cursor });
        return res.body;
    });
}
exports.tradesTicks = tradesTicks;
function ticker(param) {
    return __awaiter(this, void 0, void 0, function* () {
        const uri = url.format({
            protocol: 'https',
            hostname: constant_1.constant.UPBIT_URL_V1,
            pathname: constant_1.constant.UPBIT_URL_TICKER
        });
        const res = yield request.get(uri)
            .query({ markets: param.markets });
        return res.body;
    });
}
exports.ticker = ticker;
function orderBook(param) {
    return __awaiter(this, void 0, void 0, function* () {
        const uri = url.format({
            protocol: 'https',
            hostname: constant_1.constant.UPBIT_URL_V1,
            pathname: constant_1.constant.UPBIT_URL_ORDERBOOK
        });
        const res = yield request.get(uri)
            .query({ markets: param.markets });
        return res.body;
    });
}
exports.orderBook = orderBook;
//# sourceMappingURL=quotation.js.map