"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const exchange_1 = require("./exchange");
const quotation = require("./quotation");
class Upbit {
    constructor(accessKey, secretKey) {
        this.marketList = [];
        this.accessKey = accessKey;
        this.secretKey = secretKey;
        this.exchange = new exchange_1.ExchangeApi(accessKey, secretKey);
    }
    updateMarketAll() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.marketList = yield quotation.marketAll();
            }
            catch (e) {
                const marketAll = yield fs.readFileSync('./marketAll.json', { encoding: 'utf-8' });
                this.marketList = JSON.parse(marketAll);
            }
        });
    }
    setAuth(accessKey, secretKey) {
        this.accessKey = accessKey;
        this.secretKey = secretKey;
    }
    getAccessToken() {
        return this.accessKey;
    }
    getSecretToken() {
        return this.secretKey;
    }
    getMarketList() {
        return this.marketList;
    }
    marketAll() {
        return __awaiter(this, void 0, void 0, function* () {
            return quotation.marketAll();
        });
    }
    candlesMinutes(param) {
        return __awaiter(this, void 0, void 0, function* () {
            return quotation.candlesMinutes(param);
        });
    }
    candlesDays(param) {
        return __awaiter(this, void 0, void 0, function* () {
            return quotation.candlesDays(param);
        });
    }
    candlesWeeks(param) {
        return __awaiter(this, void 0, void 0, function* () {
            return quotation.candlesWeeks(param);
        });
    }
    candlesMonths(param) {
        return __awaiter(this, void 0, void 0, function* () {
            return quotation.candlesMonths(param);
        });
    }
    tradesTicks(param) {
        return __awaiter(this, void 0, void 0, function* () {
            return quotation.tradesTicks(param);
        });
    }
    ticker(param) {
        return __awaiter(this, void 0, void 0, function* () {
            return quotation.ticker(param);
        });
    }
    orderBook(param) {
        return __awaiter(this, void 0, void 0, function* () {
            return quotation.orderBook(param);
        });
    }
    // exchange
    getAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.exchange.getAccounts();
        });
    }
    getOrdersChance(market) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.exchange.getOrdersChance(market);
        });
    }
    getOrder(uuid, identifier) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.exchange.getOrder(uuid, identifier);
        });
    }
    getOrders(market, state, page, orderBy) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.exchange.getOrders(market, 'wait', 1);
        });
    }
    postOrders(market, side, volume, price, ordType) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.exchange.postOrders(market, side, volume, price, ordType);
        });
    }
    delOrder(uuid) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.exchange.delOrder(uuid);
        });
    }
}
exports.default = Upbit;
//# sourceMappingURL=upbit.js.map