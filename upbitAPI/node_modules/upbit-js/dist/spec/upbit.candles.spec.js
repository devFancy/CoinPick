"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const quotation_1 = require("../quotation");
describe('Upbit API candles', () => {
    beforeEach((() => __awaiter(this, void 0, void 0, function* () {
    })));
    it('caldles minutes', (() => __awaiter(this, void 0, void 0, function* () {
        const count = 5;
        const market = 'KRW-BTC';
        const unit = 1;
        const res = yield quotation_1.candlesMinutes({ unit, market, count });
        expect(res.length).toBe(count);
        expect(_.sample(res).market).toBe(market);
        expect(_.sample(res).unit).toBe(unit);
    })));
    it('caldles days', (() => __awaiter(this, void 0, void 0, function* () {
        const count = 5;
        const market = 'KRW-BTC';
        const res = yield quotation_1.candlesDays({ market, count });
        expect(res.length).toBe(count);
        expect(_.sample(res).market).toBe(market);
    })));
    it('caldles weeks', (() => __awaiter(this, void 0, void 0, function* () {
        const count = 5;
        const market = 'KRW-BTC';
        const res = yield quotation_1.candlesWeeks({ market, count });
        expect(res.length).toBe(count);
        expect(_.sample(res).market).toBe(market);
    })));
    it('caldles months', (() => __awaiter(this, void 0, void 0, function* () {
        const count = 5;
        const market = 'KRW-BTC';
        const res = yield quotation_1.candlesMonths({ market, count });
        expect(res.length).toBe(count);
        expect(_.sample(res).market).toBe(market);
    })));
});
//# sourceMappingURL=upbit.candles.spec.js.map