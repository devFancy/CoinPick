"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const upbit_1 = require("../upbit");
describe('Upbit API exchange', () => {
    // To test exchange APIs, you should set proper Access Key and Secret Key
    // which can be able to generate at Upbit site
    const accessKey = process.env.TEST_ACCESS_KEY;
    const secretKey = process.env.TEST_SECRET_KEY;
    const upbit = new upbit_1.default(accessKey, secretKey);
    beforeEach((() => __awaiter(this, void 0, void 0, function* () {
    })));
    xit('postOrders', (() => __awaiter(this, void 0, void 0, function* () {
        const res = yield upbit.postOrders('KRW-XRP', 'ask', '2', '340', 'limit');
        console.log(res);
    })));
    xit('delOrder', (() => __awaiter(this, void 0, void 0, function* () {
        const res = yield upbit.delOrder('d99e51ba-d7a3-4b46-8e0f-1fb55db8cbc1');
        console.log(res);
    })));
});
//# sourceMappingURL=upbit.exchange.spec.js.map