"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uuidv4 = require("uuid/v4");
const WebSocket = require("ws");
const utils = require("./utils");
class UpbitWs {
    constructor(codes, type, cb, opts = { isOnlySnapshot: false, isOnlyRealtime: false, simpleFormat: false }) {
        this.host = process.env.UPBIT_WS_URL || 'wss://api.upbit.com/websocket/v1';
        this.ws = undefined;
        this._codes = ['KRW-BTC '];
        this.handlers = new Map();
        this.objectMap = new Map();
        if (codes)
            this._codes = codes;
        this._codes.forEach(value => {
            this.objectMap.set(value, { type });
        });
        this.ws = new WebSocket(this.host);
        this.ws.on('open', () => {
            const msg = [
                { ticket: uuidv4() },
                { format: opts && opts.simpleFormat ? 'SIMPLE' : 'DEFAULT' },
                { type,
                    codes: this._codes,
                    isOnlySnapshot: opts && opts.isOnlySnapshot || false,
                    isOnlyRealtime: opts && opts.isOnlyRealtime || false }
            ];
            if (utils.isDebug()) {
                console.log('ws connected..');
                console.log('send..', msg);
            }
            this.ws.send(JSON.stringify(msg));
            if (cb && cb.open)
                cb.open();
        });
        this.ws.on('close', () => {
            if (utils.isDebug())
                console.log('ws disconnected..');
            if (cb && cb.close)
                cb.close();
        });
        this.ws.on('message', value => {
            if (utils.isDebug()) {
                console.log('msg received..');
                console.log(JSON.parse(value));
            }
            // for raw ws handler
            if (cb && cb.message)
                cb.message(value);
            // for registered handlers
            const obj = JSON.parse(value);
            this.handlers.forEach((cb, key) => {
                if (obj.code === key) {
                    if (obj.error)
                        cb(obj, undefined);
                    else
                        cb(undefined, obj); // ( err, value ) => {}
                }
            });
            this.setObjectMap(obj);
        });
    }
    get socket() {
        return this.ws;
    }
    get codes() {
        return this._codes;
    }
    close() {
        try {
            this.ws.close();
        }
        catch (e) {
        }
    }
    register(code, handler) {
        this.handlers.set(code, handler);
    }
    getObject(code) {
        return this.objectMap.get(code);
    }
    setObjectMap(obj) {
        if (obj.error)
            return;
        if (this.objectMap.has(obj.code)) {
            this.objectMap.set(obj.code, obj);
        }
    }
}
exports.UpbitWs = UpbitWs;
//# sourceMappingURL=upbit-ws.js.map